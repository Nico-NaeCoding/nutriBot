// src/Pages/ChatPage/ChatPage.js
import { useState, useEffect, useRef } from "react";
import axios from "axios";

import {
    Container,
    PersonalInfoContainer,
    PersonalInfoTitle,
    TitleImage,
    ChattingContainer,
    ChattingTop,
    TopIcon,
    TopTitleAndDes,
    TopTitle,
    TopDescription,
    ChattingCenter,
    ChatImage,
    Messages,
    MessageRow,
    Bubble,
    ChattingBottom,
    SendImage,
} from "./ChatPage.style.js";
import CustomButton from "../../Component/CustomButton/CustomButton.js";
import CustomRadio from "../../Component/CustomRadio/CustomRadio.js";
import CustomInput from "../../Component/CustomInput/CustomInput.js";
import { TextField, Button } from "@mui/material";
import Header from "../../Component/Header/Header.js";

const REQUEST_ADDRESS = "https://api.openai.com/v1/chat/completions";
const CHATGPT_API_KEY = process.env.REACT_APP_OPEN_AI_API_KEY;

async function GptOpenApi(messagesToSend, profile) {
    const systemMessage = {
        role: "system",
        content: "ÎÑàÎäî Ï†ÑÎ¨∏Ï†ÅÏù∏ ÏãùÎã® Í¥ÄÎ¶¨ AI ÏΩîÏπòÏù¥Îã§. \
        ÏÇ¨Ïö©ÏûêÏùò ÏÑ±Î≥Ñ, ÌÇ§, Î™∏Î¨¥Í≤å, ÏãùÎã® Í∏∞Î°ùÏùÑ Í∏∞Î∞òÏúºÎ°ú ÎßûÏ∂§Ìòï ÏãùÎã® Î∂ÑÏÑùÍ≥º Ï°∞Ïñ∏ÏùÑ ÌïúÍµ≠Ïñ¥Î°úÎßå Ï†úÍ≥µÌïúÎã§. \
        Ïñ∏Ï†úÎÇò ÏπúÏ†àÌïòÍ≥† Îî∞ÎúªÌïú ÎßêÌà¨Î•º ÏÇ¨Ïö©ÌïòÎ©∞, ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÉÅÏ≤òÎ∞õÏßÄ ÏïäÎèÑÎ°ù Í∏çÏ†ïÏ†ÅÏù¥Í≥† ÏùëÏõêÌïòÎäî ÌÉúÎèÑÎ•º Ïú†ÏßÄÌïúÎã§. \
        Ï≤¥Ï§ë, Ïô∏Î™®, Ïô∏ÌòïÏóê ÎåÄÌïú ÌèâÍ∞ÄÎÇò ÎπÑÍµêÎäî Ï†àÎåÄ ÌïòÏßÄ ÏïäÏúºÎ©∞, Ïò§ÏßÅ Í±¥Í∞ï, ÏòÅÏñë, ÏÉùÌôú ÏäµÍ¥Ä Í∞úÏÑ†ÏóêÎßå Ï¥àÏ†êÏùÑ ÎßûÏ∂òÎã§. \
        Ï°∞Ïñ∏ÏùÄ Î∞òÎìúÏãú ÏòÅÏñëÌïôÏ†Å Í∑ºÍ±∞ÏôÄ Ï†ÑÎ¨∏ ÏßÄÏãùÏùÑ Î∞îÌÉïÏúºÎ°ú ÌïòÎ©∞, ÏùòÌïôÏ†ÅÏúºÎ°ú ÏúÑÌóòÌïòÍ±∞ÎÇò ÏßÄÏÜç Î∂àÍ∞ÄÎä•Ìïú ÏãùÎã®(Ïòà: Í≥ºÎèÑÌïú Îã®Ïãù, Í∑πÎã®Ï†Å Ï†úÌïú)ÏùÄ Í∂åÌïòÏßÄ ÏïäÎäîÎã§. \
        ÎãµÎ≥ÄÏùÄ Í∞ÄÎèÖÏÑ±ÏùÑ ÏúÑÌï¥ Î¨∏Îã®Î≥ÑÎ°ú Ï†ïÎ¶¨ÌïòÍ≥†, \
        Í∞Å Î¨∏Îã®ÏùÄ (1) ÌòÑÏû¨ ÏÉÅÌô© Î∂ÑÏÑù (2) Í∞úÏÑ† Î∞©Î≤ï (3) ÏãùÎã® ÏòàÏãú Î∞è Í∂åÏû• ÏãùÌíà (4) ÎèôÍ∏∞Î∂ÄÏó¨ Î©îÏãúÏßÄ Ïùò ÌùêÎ¶ÑÏùÑ Îî∞Î•¥ÎèÑÎ°ù ÌïúÎã§. \
        Î™®Îì† ÎãµÎ≥ÄÏùÄ Î∞òÎìúÏãú ÌïúÍµ≠Ïñ¥Î°úÎßå ÏûëÏÑ±Ìï¥Ïïº ÌïòÎ©∞, Ïô∏Íµ≠Ïñ¥, Ïù¥Î™®Ìã∞ÏΩò, Î∂àÌïÑÏöîÌïú Ïû•ÏãùÏùÄ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäîÎã§."
    };

    const profileSystem = profile
        ? {
              role: "system",
              content:
                  `Îã§ÏùåÏùÄ ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑÏûÖÎãàÎã§. Ïù¥ÌõÑ ÎãµÎ≥ÄÏóêÏÑú Ï∞∏Í≥†ÌïòÏÑ∏Ïöî.\n` +
                  `- ÏÑ±Î≥Ñ: ${profile.gender || "ÎØ∏ÏûÖÎ†•"}\n` +
                  `- ÎÇòÏù¥: ${profile.age || "ÎØ∏ÏûÖÎ†•"}\n` +
                  `- ÌÇ§(cm): ${profile.height || "ÎØ∏ÏûÖÎ†•"}\n` +
                  `- Î™∏Î¨¥Í≤å(kg): ${profile.weight || "ÎØ∏ÏûÖÎ†•"}`,
          }
        : null;

    const messages = profileSystem
        ? [systemMessage, profileSystem, ...messagesToSend]
        : [systemMessage, ...messagesToSend];

    const response = await axios.post(
        REQUEST_ADDRESS,
        {
            model: "gpt-3.5-turbo",
            messages,
            max_tokens: 1000,
            temperature: 0.7,
        },
        {
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${CHATGPT_API_KEY}`,
            },
        }
    );
    return response;
}

export default function ChatPage() {
    // Í∞úÏù∏ Ï†ïÎ≥¥
    const [gender, setGender] = useState("");
    const [age, setAge] = useState("");
    const [height, setHeight] = useState("");
    const [weight, setWeight] = useState("");
    const [questionInput, setQuestionInput] = useState("");
    const [profile, setProfile] = useState(null);
    const [messagesState, setMessagesState] = useState([
        {
            id: crypto.randomUUID(),
            role: "bot",
            content: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî NutriBotÏûÖÎãàÎã§. Î®ºÏ†Ä ÏôºÏ™ΩÏóêÏÑú Í∞úÏù∏ Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏãúÍ≥†, ÏãùÎã®Ïóê ÎåÄÌï¥ ÏïåÎ†§Ï£ºÏÑ∏Ïöî!",
        },
    ]);
    const [loading, setLoading] = useState(false);

    // Ïä§ÌÅ¨Î°§ Ï†úÏñ¥
    const bottomRef = useRef(null);

    useEffect(() => {
        bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messagesState, loading]);

    const handleKeyDown = (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };
    // Í∞úÏù∏ Ï†ïÎ≥¥ Ï†ÑÏÜ°
    // const handleInformSend = async () => {
    //     try {
    //         const response = await axios.post("http://127.0.0.1:5000/profile", {
    //             gender,
    //             age,
    //             height,
    //             weight,
    //         });

    //         console.log("üìå ÏÑúÎ≤Ñ ÏùëÎãµ:", response.data);
    //     } catch (error) {
    //         console.error("‚ùå ÏÑúÎ≤Ñ ÏöîÏ≤≠ Ïã§Ìå®:", error);
    //     }
    // };

    const handleInformSend = () => {
        const p = { gender, age, height, weight };
        setProfile(p);
        setMessagesState((prev) => [
            ...prev,
            {
                id: crypto.randomUUID(),
                role: "bot",
                content: `ÌîÑÎ°úÌïÑÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏñ¥Ïöî! (ÏÑ±Î≥Ñ: ${p.gender}, ÎÇòÏù¥: ${p.age}, ÌÇ§: ${p.height}, Î™∏Î¨¥Í≤å: ${p.weight})`,
            },
        ]);
    };

    // Î©îÏãúÏßÄ Ï†ÑÏÜ°
    const handleSend = async () => {
        const text = questionInput.trim();
        if (!text) return;

        // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï∂îÍ∞Ä
        const newUserMsg = { id: crypto.randomUUID(), role: "user", content: text };
        setMessagesState((prev) => [...prev, newUserMsg]);
        setQuestionInput("");
        setLoading(true);

        try {
            const historyForOpenAI = [...messagesState, newUserMsg].map((m) => ({
                role: m.role === "bot" ? "assistant" : "user",
                content: m.content,
            }));

            const response = await GptOpenApi(historyForOpenAI, profile);
            const botText = response.data.choices?.[0]?.message?.content ?? "ÏùëÎãµ ÏóÜÏùå";
            const newBotMsg = {
                id: crypto.randomUUID(),
                role: "bot",
                content: botText,
            };
            setMessagesState((prev) => [...prev, newBotMsg]);
        } catch (e) {
            console.error(e);
            setMessagesState((prev) => [
                ...prev,
                { id: crypto.randomUUID(), role: "bot", content: "ÏóêÎü¨Í∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§." },
            ]);
        } finally {
            setLoading(false);
        }
    };

    return (
        <>
            <Header />
            <Container>
                {/* Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†•ÎûÄ */}
                <PersonalInfoContainer>
                    <PersonalInfoTitle>
                        <TitleImage src="./images/greenhuman.png" />
                        Í∞úÏù∏ Ï†ïÎ≥¥
                    </PersonalInfoTitle>

                    <CustomRadio
                        value={gender}
                        onChange={(e) => setGender(e.target.value)}
                        options={[
                            { value: "male", label: "ÎÇ®ÏÑ±" },
                            { value: "female", label: "Ïó¨ÏÑ±" },
                        ]}
                    />
                    <CustomInput label="ÎÇòÏù¥" value={age} onChange={(e) => setAge(e.target.value)} />
                    <CustomInput label="ÌÇ§(cm)" value={height} onChange={(e) => setHeight(e.target.value)} />
                    <CustomInput label="Î™∏Î¨¥Í≤å(kg)" value={weight} onChange={(e) => setWeight(e.target.value)} />
                    <CustomButton ButtonMessage="ÎÇ¥ Ï†ïÎ≥¥ ÏïåÎ†§Ï£ºÍ∏∞" ButtonOnClick={handleInformSend} fullWidth />
                </PersonalInfoContainer>

                {/* Ï±ÑÌåÖÏ∞Ω */}
                <ChattingContainer>
                    <ChattingTop>
                        <TopIcon src="./images/white.png" />
                        <TopTitleAndDes>
                            <TopTitle>NutriBot</TopTitle>
                            <TopDescription>AI ÏãùÎã® Î∂ÑÏÑù Ï†ÑÎ¨∏Í∞Ä</TopDescription>
                        </TopTitleAndDes>
                    </ChattingTop>

                    <ChattingCenter ref={bottomRef}>
                        <Messages>
                            {messagesState.map((m) => {
                                const isUser = m.role === "user";
                                return (
                                    <MessageRow key={m.id} $isUser={isUser}>
                                        {!isUser && <ChatImage src="./images/gray.png" alt="bot" />}
                                        <Bubble $isUser={isUser}>{m.content}</Bubble>
                                    </MessageRow>
                                );
                            })}
                            {loading && (
                                <MessageRow $isUser={false}>
                                    <ChatImage src="./images/gray.png" alt="bot" />
                                    <Bubble>...</Bubble>
                                </MessageRow>
                            )}
                        </Messages>
                    </ChattingCenter>

                    <ChattingBottom>
                        <TextField
                            value={questionInput}
                            onChange={(e) => setQuestionInput(e.target.value)}
                            onKeyDown={handleKeyDown}
                            fullWidth
                            multiline
                            minRows={4}
                            sx={{
                                "& .MuiOutlinedInput-root": {
                                    "& fieldset": { borderRadius: "12px" },
                                    "&.Mui-focused fieldset": { borderColor: "#059669" },
                                },
                            }}
                        />
                        <Button
                            variant="contained"
                            onClick={handleSend}
                            sx={{
                                backgroundColor: "#059669",
                                "&:hover": { backgroundColor: "#047857" },
                                borderRadius: "12px",
                            }}
                        >
                            <SendImage src="./images/upload.png" />
                        </Button>
                    </ChattingBottom>
                </ChattingContainer>
            </Container>
        </>
    );
}
